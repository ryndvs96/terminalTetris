package blocks;

public class Tester {
	private static int size = 9;
	private static char one = '1';
	private static char zero = '0';
	public static void main(String[] args) {
		char[][] block1 = { {'0', '1', '1', '0', '0', '0', '0', '0', '0'},
							{'0', '1', '0', '0', '0', '0', '0', '0'},
							{'1', '1', '0', '0', '0', '0', '0'},
							{'1', '1', '1', '0', '0', '0'},
							{'0', '1', '0', '0', '0'},
							{'0', '0', '0', '0'},
							{'0', '0', '0'},
							{'0', '0'},
							{'0'}};
		char[][] block2 = { {'1', '1', '0', '1', '0', '0', '0', '0', '0'},
							{'0', '1', '1', '1', '0', '0', '0', '0'},
							{'1', '1', '1', '0', '0', '0', '0'},
							{'0', '0', '0', '0', '0', '0'},
							{'0', '0', '0', '0', '0'},
							{'0', '0', '0', '0'},
							{'0', '0', '0'},
							{'0', '0'},
							{'0'}};
		int rot1 = calculateRotation(block1);
		int rot2 = calculateRotation(block2);
		System.out.println("rot1 = " + rot1);
		System.out.println("rot2 = " + rot2);
		rot1 = calculateRotation(rotate(block1, 1));
		rot2 = calculateRotation(rotate(block2, 1));
		System.out.println("rot1 = " + rot1);
		System.out.println("rot2 = " + rot2);
		rot1 = calculateRotation(rotate(block1, 2));
		rot2 = calculateRotation(rotate(block2, 2));
		System.out.println("rot1 = " + rot1);
		System.out.println("rot2 = " + rot2);
		rot1 = calculateRotation(rotate(block1, 3));
		rot2 = calculateRotation(rotate(block2, 3));
		System.out.println("rot1 = " + rot1);
		System.out.println("rot2 = " + rot2);
		rot1 = calculateRotation(rotate(block1, 0));
		rot2 = calculateRotation(rotate(block2, 0));
		System.out.println("rot1 = " + rot1);
		System.out.println("rot2 = " + rot2);
	}
	private static int calculateRotation(char[][] block) {
		int[] rows = new int[size];
		int[] cols = new int[size];
		for (int i = 0; i < size; i++) {
			for (int j = 0; j + i < size; j++) {
				if (block[i][j] == one) {
					rows[i]++;
					cols[j]++;
				}
			}
		}
		int xLeft = -1, xRight = -1, yTop = -1, yBot = -1;
		for (int i = 0; i < size; i++) {
			if (rows[i] > 0 && yTop == -1) {
				yTop = i;
			}
			if (rows[size - i - 1] > 0 && yBot == -1) {
				yBot = size - i;
			}
			if (cols[i] > 0 && xLeft == -1) {
				xLeft = i;
			}
			if (cols[size - 1 - i] > 0 && xRight == -1) {
				xRight = size - i;
			}
			if (xLeft > -1 && xRight > -1 && yTop > -1 && yBot > -1) {
				break;
			}
		}
		double height = yBot - yTop;
		double width = xRight - xLeft;
		double xComTop = 0;
		double yComTop = 0;
		for (int i = 0; i < cols.length; i++) {
			if (cols[i] > 0) {
				xComTop += ((i + 0.5) * cols[i]);
			}
		}
		for (int i = 0; i < rows.length; i++) {
			if (rows[i] > 0) {
				yComTop += ((i + 0.5) * rows[i]);
			}
		}
		double xCom = ((double) xComTop) / ((double) size);
		double yCom = ((double) yComTop) / ((double) size);
		if (xCom > width / 2) {
			if (yCom > height / 2) {
				return 2;
			}
			else if (yCom < height / 2) {
				return 1;
			}
			else {
				return 1;
			}
		}
		else if (xCom < width / 2) {
			if (yCom > height / 2) {
				return 3;
			}
			else if (yCom < height / 2) {
				return 0;
			}
			else {
				return 3;
			}
		}
		else {
			if (yCom > height / 2) {
				return 2;
			}
			else if (yCom < height / 2) {
				return 0;
			}
			else {
				double topHalf = 0.0, bottomHalf = 0.0;
				double leftHalf = 0.0, rightHalf = 0.0;
				for (int i = 0; i < width / 2; i++) {
					if (cols[i] > 0) {
						leftHalf += cols[i];
					}
				}
				for (int i = (int) width; i > width / 2; i--) {
					if (cols[i] > 0) {
						rightHalf += cols[i];
					}
				}
				for (int i = 0; i < height / 2; i++) {
					if (rows[i] > 0) {
						topHalf += rows[i];
					}
				}
				for (int i = (int) height; i > height / 2; i--) {
					if (rows[i] > 0) {
						bottomHalf += rows[i];
					}
				}
				int rotation = -1;
				if (topHalf > bottomHalf) {
					if (leftHalf > rightHalf) {
						rotation = 0;
					}
					else if (leftHalf < rightHalf) {
						rotation = 1;
					}
					else {
						rotation = 0;
					}
				}
				else if (topHalf < bottomHalf) {
					if (leftHalf > rightHalf) {
						rotation = 3;
					}
					else if (leftHalf < rightHalf) {
						rotation = 2;
					}
					else {
						rotation = 2;
					}
				}
				else {
					if (leftHalf > rightHalf) {
						rotation = 3;
					}
					else if (leftHalf < rightHalf) {
						rotation = 1;
					}
					else {
						rotation = -1;
					}
				}
				if (rotation == -1) {
					if (width > height) {
						return 1;
					}
					else {
						return 0;
					}
				}
				else {
					return rotation;
				}
			}
		}
	}
	private static char[][] rotate(char[][] block, int times) {
		if (times == 0) {
			return block;
		}
		// calculate adjustment
		int[] rows = new int[size];
		int[] cols = new int[size];
		boolean breaker = false;
		for (int i = 0; i < size; i++) {
			for (int j = 0; j + i < size; j++) {
				if (block[i][j] == one) {
					rows[i]++;
					breaker = true;
					break;
				}
			}
			if (breaker) {
				break;
			}
		}
		breaker = false;
		for (int i = size - 1; i >= 0 ; i--) {
			for (int j = 0; j + i < size; j++) {
				if (block[j][i] == one) {
					cols[size - i - 1]++;
					breaker = true;
					break;
				}
			}
			if (breaker) {
				break;
			}
		}
		int left = -1;
		int up = -1;
		for (int i = 0; i < size; i++) {
			if (rows[i] > 0 && left == -1) {
				left = i;
				break;
			}
		}
		for (int i = 0; i < size; i++) {
			if (cols[i] > 0 && up == -1) {
				up = i;
				break;
			}
		}
		char[][] copy = newBlock();

		for (int i = 0; i < size; i++) {
			for (int j = 0; j + i < size; j++) {
				int newi = size - 1 - j - up;
				int newj = i - left;
				if (newi < 0 || newj < 0 || (newi + newj >= size)) {
					continue;
				}
				copy[newi][newj] = block[i][j];
			}
		}
		if (times > 1) {
			return rotate(copy, times - 1);
		}
		else {
			return copy;
		}
	}
	private static char[][] newBlock() {
		char[][] newBlock = new char[size][];
		for (int i = 0; i < size; i++) {
			newBlock[i] = new char[size - i];
			for (int j = 0; j  + i < size; j++) {
				newBlock[i][j] = zero;
			}
		}
		return newBlock;
	}
}
