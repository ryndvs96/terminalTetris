package blocks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
public class BlockAlgorithm4 {
	private static ArrayList<Object> all = new ArrayList<Object>();
	public static void main(String[] args) {
		Runtime run = Runtime.getRuntime();
		byte size = 9; // must be 11 or less
		long time1 = System.currentTimeMillis();
		run.gc();
		double oldMemoryUsed = ((double) run.totalMemory() - (double) run.freeMemory()) / 1000000; 
		Blocks blocks = (new BlockAlgorithm4()).new Blocks(size);
		blocks.build();
		run.gc();
		double memoryUsed = (((double) run.totalMemory() - (double) run.freeMemory()) / 1000000) - oldMemoryUsed; 
		blocks.print(true, null);
		long time2 = System.currentTimeMillis();
		double time = ((double) (time2 - time1)) / 1000;
		
		String newBlocks = String.valueOf(blocks.getNewBlocks());
		System.out.println(String.format(time + " seconds : " + comma(newBlocks) 
				+ " new Blocks() : %.3f megabytes used : For " + size + " block piece.", + memoryUsed));
		all.size();
	}
	public class Blocks {
		public Map<String, Object> blocks = null;
		private char one = '1';
		private char zero = '0';
		private int newBlocks = 0;
		private byte size = 0;
		private byte iteratedSize = 0;

		public Blocks(byte size) {
			byte i = 0;
			addObjects(i, size, this.one, this.zero, this.newBlocks, this.size, this.iteratedSize);
			//////////////////////
			
			this.blocks = new HashMap<String, Object>();
			this.size = size;
			for (i = size; i > 0; i--) {
				this.iteratedSize += i;
			}
			
			//////////////////////
			addObjects(this.blocks);
		}

		public void build() {
			byte i = 0, j = 0, k = 0; 
			short halfsize = 0;
			byte round = 0;
			
			addObjects(i, j, k, halfsize, round);
			
			char[][] block = null;
			//////////////////////

			block = newBlock();
			block[0][0] = one;
			build(block, 1);
			if (size >= 5) {
				halfsize = size % 2 == 0 ? (size / 2) : (size - 1) / 2;
				for (i = 1; i < halfsize; i++) {
					for (j = 1, round = 0; j < halfsize; j++) {
						round = 0;
						block = newBlock();
						for (k = 0; k < j; k++) {
							block[i][k] = one;
							round++;
						}
						for (k = 0; k < i; k++) {
							block[k][j] = one;
							round++;
						}
						block[i][j] = one;
						round++;
						build(block, round);
					}
				}
			}
			
			///////////////////////
			addObjects(block, null);
		}
		
		private void build(char[][] block, byte round) {
			byte i = 0, j = 0;
			
			addObjects(i, j);
			
			char[][] copy = null;
			//////////////////////
			
			if (round < size) {
				for (i = 0; i < size; i++) {
					for (j = 0; j + i < size && j + i <= round; j++) {
						if (cellCheck(block, i, j)) {
							copy = blockCopy(block);
							copy[i][j] = one;
							build(copy, (byte) (round + 1));
						}
					}
				}
			}
			else {
				add(block);
			}
			
			///////////////////////
			addObjects(copy, null);
		}
		private char[][] rotate(char[][] block, byte times) {
			if (times == 0) {
				return block;
			}

			//////////////////////
			byte i = 0, j = 0;
			byte newi = 0;
			byte newj = 0;
			byte up = 0;
			byte left = 0;
			boolean breaker = false;
			
			addObjects(i, j, newi, newj, up, left, breaker);
			
			byte[] rows = null;
			byte[] cols = null;
			char[][] copy = null;
			//////////////////////
			
			rows = new byte[size];
			cols = new byte[size];
			breaker = false;
			for (i = 0; i < size; i++) {
				for (j = 0; j + i < size; j++) {
					if (block[i][j] == one) {
						rows[i]++;
						breaker = true;
						break;
					}
				}
				if (breaker) {
					break;
				}
			}
			breaker = false;
			for (i = size - 1; i >= 0 ; i--) {
				for (j = 0; j + i < size; j++) {
					if (block[j][i] == one) {
						cols[size - i - 1]++;
						breaker = true;
						break;
					}
				}
				if (breaker) {
					break;
				}
			}
			left = -1;
			up = -1;
			for (i = 0; i < size; i++) {
				if (rows[i] > 0 && left == -1) {
					left = i;
					break;
				}
			}
			for (i = 0; i < size; i++) {
				if (cols[i] > 0 && up == -1) {
					up = i;
					break;
				}
			}
			copy = newBlock();
			for (i = 0; i < size; i++) {
				for (j = 0; j + i < size; j++) {
					newi = size - 1 - j - up;
					newj = i - left;
					if (newi < 0 || newj < 0 || (newi + newj >= size)) {
						continue;
					}
					copy[newi][newj] = block[i][j];
				}
			}
			
			//////////////////////////////////
			addObjects(rows, cols, copy);
			//////////////////////////////////
			
			if (times > 1) {
				return rotate(copy, times - 1);
			}
			else {
				return copy;
			}
		}
		
		private byte calculateRotation(char[][] block) {
			byte i = 0, j = 0;
			
			byte xLeftIndex = -1;
			byte xRightIndex = -1;
			byte yTopIndex = -1;
			byte yBotIndex = -1;
			
			byte rotation = -1;

			float height = 0f;
			float width = 0f;
			
			float xCenterOfMassTop = 0f; // of equation
			float yCenterOfMassTop = 0f; // of equation
			float xCenterOfMass = 0f;
			float yCenterOfMass = 0f;
			
			float leftHalf = 0f;
			float rightHalf = 0f;
			float topHalf = 0f;
			float bottomHalf = 0f;
			
			float topLeftQuarter = 0f;
			float bottomLeftQuarter = 0f;
			float topRightQuarter = 0f;
			float bottomRightQuarter = 0f;
			
			addObjects(i, j, xLeftIndex, xRightIndex, yTopIndex, yBotIndex, rotation, height, width);
			addObjects(xCenterOfMassTop, yCenterOfMassTop, xCenterOfMass, yCenterOfMass);
			addObjects(leftHalf, rightHalf, topHalf, bottomHalf);
			addObjects(topLeftQuarter, bottomLeftQuarter, topRightQuarter, bottomRightQuarter);
			
			byte[] rows = null;
			byte[] cols = null;
			////////////////////////
			
			rows = new byte[size];
			cols = new byte[size];
			for (i = 0; i < size; i++) {
				for (j = 0; j + i < size; j++) {
					if (block[i][j] == one) {
						rows[i]++;
						cols[j]++;
					}
				}
			}
			xLeftIndex = -1;
			xRightIndex = -1;
			yTopIndex = -1;
			yBotIndex = -1;
			for (i = 0; i < size; i++) {
				if (rows[i] > 0 && yTopIndex == -1) {
					yTopIndex = i;
				}
				if (rows[size - i - 1] > 0 && yBotIndex == -1) {
					yBotIndex = size - i;
				}
				if (cols[i] > 0 && xLeftIndex == -1) {
					xLeftIndex = i;
				}
				if (cols[size - 1 - i] > 0 && xRightIndex == -1) {
					xRightIndex = size - i;
				}
				if (xLeftIndex > -1 && xRightIndex > -1 && yTopIndex > -1 && yBotIndex > -1) {
					break;
				}
			}
			height = yBotIndex - yTopIndex;
			width = xRightIndex - xLeftIndex;
			xCenterOfMassTop = 0;
			yCenterOfMassTop = 0;
			for (i = 0; i < cols.length; i++) {
				if (cols[i] > 0) {
					xCenterOfMassTop += ((i + 0.5) * cols[i]);
				}
			}
			for (i = 0; i < rows.length; i++) {
				if (rows[i] > 0) {
					yCenterOfMassTop += ((i + 0.5) * rows[i]);
				}
			}
			xCenterOfMass = ((float) xCenterOfMassTop) / ((float) size);
			yCenterOfMass = ((float) yCenterOfMassTop) / ((float) size);
			if (xCenterOfMass > width / 2) {
				if (yCenterOfMass > height / 2) {
					rotation = 2;
				}
				else if (yCenterOfMass < height / 2) {
					rotation = 1;
				}
				else {
					rotation = 1;
				}
			}
			else if (xCenterOfMass < width / 2) {
				if (yCenterOfMass > height / 2) {
					rotation = 3;
				}
				else if (yCenterOfMass < height / 2) {
					rotation = 0;
				}
				else {
					rotation = 3;
				}
			}
			else {
				if (yCenterOfMass > height / 2) {
					rotation = 2;
				}
				else if (yCenterOfMass < height / 2) {
					rotation = 0;
				}
				else {
					topHalf = 0.0f; bottomHalf = 0.0f;
					leftHalf = 0.0f; rightHalf = 0.0f;
					for (i = 1; i < width / 2; i++) {
						if (cols[i - 1] > 0) {
							leftHalf += cols[i - 1];
						}
					}
					for (i = (byte) width - 1; i > width / 2; i--) {
						if (cols[i] > 0) {
							rightHalf += cols[i];
						}
					}
					for (i = 1; i < height / 2; i++) {
						if (rows[i - 1] > 0) {
							topHalf += rows[i - 1];
						}
					}
					for (i = (byte) height - 1; i > height / 2; i--) {
						if (rows[i] > 0) {
							bottomHalf += rows[i];
						}
					}
					rotation = -1;
					if (topHalf > bottomHalf) {
						if (leftHalf > rightHalf) {
							rotation = 0;
						}
						else if (leftHalf < rightHalf) {
							rotation = 1;
						}
						else {
							rotation = 0;
						}
					}
					else if (topHalf < bottomHalf) {
						if (leftHalf > rightHalf) {
							rotation = 3;
						}
						else if (leftHalf < rightHalf) {
							rotation = 2;
						}
						else {
							rotation = 2;
						}
					}
					else {
						if (leftHalf > rightHalf) {
							rotation = 3;
						}
						else if (leftHalf < rightHalf) {
							rotation = 1;
						}
						else {
							rotation = -1;
						}
					}
					if (rotation == -1) {
						topLeftQuarter = 0.0f; bottomLeftQuarter = 0.0f;
						topRightQuarter = 0.0f; bottomRightQuarter = 0.0f;
						for (i = 1; i < width / 2; i++) {
							for (j = 1; j < height / 2; j++) {
								if (block[j - 1][i - 1] == one) {
									topLeftQuarter++;
								}
							}
							for (j = (byte) height - 1; j > height / 2; j--) {
								if (block[j][i - 1] == one) {
									bottomLeftQuarter++;
								}
							}
						}
						for (i = (byte) width - 1; i > width / 2; i--) {
							for (j = 1; j < height / 2; j++) {
								if (block[j - 1][i] == one) {
									topRightQuarter++;
								}
							}
							for (j = (byte) height - 1; j > height / 2; j--) {
								if (block[j][i] == one) {
									bottomRightQuarter++;
								}
							}
						}
						if (topLeftQuarter > topRightQuarter && topLeftQuarter > bottomRightQuarter && topLeftQuarter > bottomLeftQuarter) {
							rotation = 0;
						}
						else if (topRightQuarter > topLeftQuarter && topRightQuarter > bottomRightQuarter && topRightQuarter > bottomLeftQuarter) {
							rotation = 1;
						}
						else if (bottomRightQuarter > topRightQuarter && bottomRightQuarter > topLeftQuarter && bottomRightQuarter > bottomLeftQuarter) {
							rotation = 2;
						}
						else if (bottomLeftQuarter > topRightQuarter && bottomLeftQuarter > bottomRightQuarter && bottomLeftQuarter > topLeftQuarter) {
							rotation = 3;
						}
						else {
							if (blockCheck(format(block, 1))) {
								rotation = 1;
							}
							else if (blockCheck(format(block, 2))) {
								rotation = 2;
							}
							else if (blockCheck(format(block, 3))) {
								rotation = 3;
							}
							else if (width > height) {
								rotation = 1;
							}
							else {
								rotation = 0;
							}
						}
					}
				}
			}
			
			//////////////////////////////
			addObjects(rows, cols);
			//////////////////////////////
			
			return rotation;
		}

		private String getKeyString(char[][] block) {
			byte i = 0, j = 0;
			byte count = 0;
			byte prevCount = 0;
			byte track = 0;
			byte total = 0;
			
			addObjects(i, j, count, prevCount, track, total);
			
			char[] keyChars = null;
			String key = null;
			//////////////////////
			
			keyChars = new char[size];
			for (i = 0, count = 0; i < size; i++) {
				for (j = 0; j + i < size; j++) {
					if (total == size) {
						break;
					}
					if (block[i][j] == '1') {
						if (track > 0 && prevCount == 0) {
							keyChars[track - 1] = (char) (65 + count);
							prevCount = size;
						}
						else {
							keyChars[track] = (char) (count + 48);
							track++;
							prevCount = count;
						}
						count = 0;
						total++;
					}
					else {
						count++;
					}
				}
				if (total == size) {
					break;
				}
			}
			key = String.valueOf(keyChars);
			
			//////////////////////////////
			addObjects(keyChars, key);
			//////////////////////////////
			
			return key;
		}
		private boolean cellCheck(char[][] block, byte i, byte j) {
			byte nullCount = 0;
			
			addObjects(nullCount);
			//////////////////////

			nullCount = 0;
			if (block[i][j] == one) {
				return false;
			}
			try {
				if (block[i + 1][j] != one) {
					nullCount++;
				}
			} catch (Exception e) {
				nullCount++;
			}
			try {
				if (block[i - 1][j] != one) {
					nullCount++;
				}
			} catch (Exception e) {
				nullCount++;
			}
			try {
				if (block[i][j + 1] != one) {
					nullCount++;
				}
			} catch (Exception e) {
				nullCount++;
			}
			try {
				if (block[i][j - 1] != one) {
					nullCount++;
				}
			} catch (Exception e) {
				nullCount++;
			}
			if (nullCount != 4) {
				return true;
			}
			else {
				return false;
			}
		}
		private char[][] blockCopy(char[][] block) {
			byte i = 0, j = 0;
			
			addObjects(i, j);
			
			char[][] blockCopy = null;
			//////////////////////
			
			blockCopy = newBlock();
			for (i = 0; i < size; i++) {
				for (j = 0; j + i < size; j++) {
					blockCopy[i][j] = block[i][j];
				}
			}
			
			//////////////////////
			addObjects(blockCopy, null);
			//////////////////////
			
			return blockCopy;
		}
		private char[][] newBlock() {
			byte i = 0, j = 0;
			
			addObjects(i, j);
			
			char[][] newBlock = null;
			//////////////////////
			
			newBlocks++;
			newBlock = new char[size][];
			for (i = 0; i < size; i++) {
				newBlock[i] = new char[size - i];
				for (j = 0; j  + i < size; j++) {
					newBlock[i][j] = zero;
				}
			}
			
			/////////////////////////////
			addObjects(newBlock, null);
			/////////////////////////////
			
			return newBlock;
		}
		private char[][] format(char[][] block) {
			return block = rotate(block, calculateRotation(block));
		}
		private char[][] format(char[][] block, byte rot) {
			return block = rotate(block, rot % 4);
		}
		private void add(char[][] block) {
			block = format(block);
			if (blockCheck(block)) {
				return;
			}
			addToList(block);
		}
		private void addToList(char[][] block) {
			String key = null;
			//////////////////////
			
			key = getKeyString(block);
			blocks.put(key, null);
			print(false, key);
			
			//////////////////////
			addObjects(key);
		}
		private boolean blockCheck(char[][] block) {
			return blocks.containsKey(getKeyString(block));
		}
		public void print(boolean end, String key) {
			String print = null;
			if (!end) {
				print = String.format("%7d--- %s", blocks.size(), key);
			}
			else {
				print = String.format("    END--- %s newBlocks()", comma(String.valueOf(newBlocks)));
			}
			System.out.println(print);
		}
		public void decrypt() {
			Object[] arr = blocks.keySet().toArray();
			for (int i = 0; i < arr.length; i++) {
				char[] key = ((String) arr[i]).toCharArray();
				System.out.println("------------------" + (i + 1) + " : " + blocks.get(String.valueOf(key)));
				char[] act = new char[iteratedSize];
				for (int j = 0, count = 0, tot = 0; tot < size && j < key.length; j++) {
					char val = key[j];
					if (val >= 65) {
						int spaces = val - 65;
						act[count] = '1';
						tot++;
						count++;
						for (int k = 0; k < spaces; k++) {
							count++;
						}
						act[count] = '1';
						tot++;
						count++;
					}
					else {
						int spaces = val - 48;
						for (int k = 0; k < spaces; k++) {
							count++;
						}
						act[count] = '1';
						tot++;
						count++;
					}
				}
				for (int j = size, count = 0; j > 0; j--) {
					for (int k = 0; k < j; k++) {
						if (act[count + k] == '1') {
							System.out.print("O ");
						}
						else {
							System.out.print("  ");
						}
					}
					count += j;
					System.out.println();
				}
			}
			System.out.println(arr.length);
		}
		public long getNewBlocks() {
			return this.newBlocks;
		}
	}
	public static String comma(String str) {
		int len = str.length();
		if (len <= 3) {
			return str;
		}
		else {
			String formatted = "";
			int top = len % 3;
			int fix = (len - top) / 3;
			if (top > 0) {
				formatted += str.substring(0, top) + ",";
			}
			for (int i = 0; i < fix; i++) {
				int start = (i * 3) + top;
				int end = start + 3;
				if (i == fix - 1) {
					formatted += str.substring(start, end);
				}
				else {
					formatted += str.substring(start, end) + ",";
				}
			}
			return formatted;
		}
	}
	public static void addObjects(Object... args) {
		for (int i = 0; i < args.length; i++) {
			all.add(args[i]);
		}
	}
}


